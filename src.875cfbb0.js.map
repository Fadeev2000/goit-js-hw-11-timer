{"version":3,"sources":["index.js"],"names":["TARGET_DATE","CountdownTimer","selector","targetDate","targetTime","getTime","intervalId","setInterval","currentTime","Date","now","deltaTime","time","getTimeComponents","selectorEl","document","querySelector","classList","add","clearInterval","Array","from","querySelectorAll","forEach","item","key","dataset","value","textContent","setTimeout","remove","days","pad","Math","floor","hours","mins","secs","String","padStart","countdownTimer","start"],"mappings":";;;AA0FA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA1FA,QAAA,oBAEA,IAAMA,EAAc,eAKdC,EAAAA,WACoC,SAAA,EAAA,GAAxBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAc,EAAA,KAAA,GAC7BD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EAgF1B,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,QA7EI,MAAA,WAAQ,IAAA,EAAA,KACEC,EAAa,KAAKD,WAAWE,UAE7BC,EAAaC,YAAY,WACrBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAYP,EAAaI,EACzBI,EAAO,EAAKC,kBAAkBF,GAC9BG,EAAaC,SAASC,cAAc,EAAKd,UAE3CS,GAAAA,EAAY,EAGZ,OAFAG,EAAWG,UAAUC,IAAI,gBACzBC,cAAcb,GAIAc,MAAMC,KAAKP,EAAWQ,iBAAiB,eAE/CC,QAAQ,SAACC,GACTC,IAAAA,EAAMD,EAAKE,QAAQC,MAErBH,GAAAA,EAAKI,cAAgBhB,EAAKa,GAAM,CAChCD,EAAKP,UAAUC,IAAI,SAEJW,WAAW,WACtBL,EAAKP,UAAUa,OAAO,UACxB,KAGNN,EAAKI,YAAchB,EAAKa,MAE7B,OA+CX,CAAA,IAAA,oBA5CI,MAAA,SAAkBb,GA4BP,MAAA,CAACmB,KAtBK,KAAKC,IAAIC,KAAKC,MAAMtB,EAAQ,QAsB3BuB,MAfA,KAAKH,IAAIC,KAAKC,MAAOtB,EAAQ,MAAyB,OAe/CwB,KATR,KAAKJ,IAAIC,KAAKC,MAAOtB,EAAQ,KAAoB,MASnCyB,KAHd,KAAKL,IAAIC,KAAKC,MAAOtB,EAAQ,IAAc,SAmBhE,CAAA,IAAA,MAVI,MAAA,SAAIe,GACWW,OAAAA,OAAOX,GAAOY,SAAS,EAAG,SAS7C,EAnFMtC,GA8EAuC,EAAiB,IAAIvC,EAAe,CACxCC,SAAU,WACVC,WAAY,IAAIM,KAAKT,KAGvBwC,EAAeC","file":"src.875cfbb0.js","sourceRoot":"..\\src","sourcesContent":["import './sass/main.scss';\n\nconst TARGET_DATE = 'Jul 17, 2021';\n/*Проверка исчезновения таймера после окончания отсчета\nconst TARGET_DATE = new Date(Date.now()+5000);*/\n\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.selector = selector;\n        this.targetDate = targetDate;\n    }\n\n    start() {\n        const targetTime = this.targetDate.getTime();\n\n        const intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const deltaTime = targetTime - currentTime;\n            const time = this.getTimeComponents(deltaTime);\n            const selectorEl = document.querySelector(this.selector);\n\n            if (deltaTime < 0) {\n                selectorEl.classList.add('visible');\n                clearInterval(intervalId);\n                return;\n            }\n\n            const spansTime = Array.from(selectorEl.querySelectorAll('span.value'));\n\n            spansTime.forEach((item) => {\n                const key = item.dataset.value;\n                \n                if (item.textContent !== time[key]) {\n                    item.classList.add('color');\n\n                    const timeId = setTimeout(() => {\n                        item.classList.remove('color');\n                    },500);\n                }\n\n                item.textContent = time[key];\n             });\n        }, 1000);\n    }\n\n    getTimeComponents(time) {\n\n        /*\n        * Оставшиеся дни: делим значение UTC на 1000 * 60 * 60 * 24, количество\n        * миллисекунд в одном дне (миллисекунды * секунды * минуты * часы)\n        */\n        const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n\n        /*\n        * Оставшиеся часы: получаем остаток от предыдущего расчета с помощью оператора\n        * остатка % и делим его на количество миллисекунд в одном часе\n        * (1000 * 60 * 60 = миллисекунды * минуты * секунды)\n        */\n        const hours = this.pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n\n        /*\n        * Оставшиеся минуты: получаем оставшиеся минуты и делим их на количество\n        * миллисекунд в одной минуте (1000 * 60 = миллисекунды * секунды)\n        */\n        const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n\n        /*\n        * Оставшиеся секунды: получаем оставшиеся секунды и делим их на количество\n        * миллисекунд в одной секунде (1000)\n        */\n        const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    \n        //console.log(`${days}:${hours}:${mins}:${secs}`);\n        return {days, hours, mins, secs};\n    }\n    \n    /*\n   * Принимает число, приводит к строке и добавляет в начало 0 если число меньше 2-х знаков\n   */\n    pad(value) {\n            return String(value).padStart(2, '0');\n        }\n}\n\nconst countdownTimer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date(TARGET_DATE),\n});\n\ncountdownTimer.start();"]}